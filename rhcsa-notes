# These are my study notes for RHCSA exam, taken while watching courses and doing labs. 

Lesson 2: Using Essential Tools

CLI Commands
	- pwd: print working directory
	- whoami: current username
	- ls: current directory
	- ls -l: -l is the "option," which shows names of directories and their properties
	- ip addr show: current IP configuration
	- free: available memory
	- free -m: m option is for megabytes
	- df - disk free and storage devices
	- df -h: h option is for human-readable formats
	- cat: Shows contents of a configuration file
	- findmnt: shows mounted file systems on machine


Understanding the Shell

Bash is the default shell
	- Tab command completion (press tab twice to show list of available options)
	- "history" command - shows list of previous use of commands
	- Use "!11" will run command eleven in the list above again. You can also use ctrl R and type in the command you want to use. You can also use the up-arrow key. 
	- Piping or semicolon - string together inputs
	- "ps aux" - ps shows processes and aux shows all processes. More powerful with root user
	*- "less" doesn't show the entire list, so ps aux | less shows screen 1. Press space to show more.
	- "wc" is word count command
	- Redirection - use ">"
	- Append - use ">>"
	- Redirect error messages - "2>"; used for results that exist and don't exist in 	one command
	- "env" - environment variables
	- Aliases - command you have defined yourself or shortcut to another command; for example: h = history makes h short for historical list of commands
	- Scripts - command file with several lines of code that can be run as an independent command
	

Understanding I/O Redirection and Piping
	- Redirection uses STDIN (standard input), STDERR (standard error) and STDOUT (standard output)
	- ">" and ">>" are for output redirection, "2>" for standard error redirection and "<" for input direction
	- In Piping, the STDOUT of the first command is used as STDIN of the second command
	- "Grep": filtering utility for searching text
	- "-R": recursive, which means including subdirectories
	- Example of redirecting: "grep -R student /etc 2>/dev/null" which redirects errors to /dev/null, which will drop everything, and will show only the ones that are useful
	- Example of piping: "ls -l /etc | grep host" will pipe in grep, the filtering tool, and look for files/directories only with the name 'host' in them


Understanding the Linux File System
	- Known as "FHS"
	- Directory usage is standardized and maintained by Linux Foundation
	- The starting point is root directory
	- Different devices may be integrated in FHS by using mounts
	- Root directory is mounted on disk device on whatever the name of your disk device is
	- Boot directory is split off and on its own device
	- Home directory can be on a remote server; server:/home
	- cd .. : means bring up one level
	- cd /boot: This is everything that is needed to boot machine, including vmlinuz, which is the Linux kernel and allows you to interact with the hardware
	- cd /dev: This is for devices and allows you to talk to specific hardware devices. 
	- etc: directory for configuration files that are readable
	- cd /home: lists user home folders
	- useradd command: allows you to create a new user, such as "useradd test"
	- cd /usr: program files and binaries in bin (commands used by normal users) and sbin (system commands used by root)
	- cd /var: writes dynamic data, such as log files in /var/log
	- man hier: manual of hierarchy


Using man
	- Sections define command types in man
	- man man: man page of manual
		- Section 1: Executable programs or shell commands: ran by ordinary users
		- Section 5: File formats and conventions: ran for config files
		- Section 8: System administration commands: ran by sysadmins as root
	- Example: man lvcreate returns "LVCREATE(8)", the 8 meaning it's from sysadmin section 8.
	- Examples of commands used are usually at the bottom of man page, which you can get to by typing uppercase "G"
	- Search for text using /
	- On a man page, the synopsis shows what options are available to use with command. If there are brackets, such as "[OPTION]", then it is optional. The 		multiple dots means it can be used multiple times.  
	
  
Finding the Right Man Page
	- All man pages are indexed in the Mandy
	- Use man -k or apropos to search mandb based on keyword
	- A lot of results can show; use grep to filter the results
	- The mandate is built automatically through a cron scheduled task
	- Manually trigger a rebuild using mandb
	- regex: regular expression
	- Update mandb by typing in "su - mandb"
	- man -k user | grep [section]
	
  
Understanding vim
	- vim (or vi) is the default editor and is used as an embedded editor by many commands
	- vim is an enhanced version of vi
	- To work with vim, you need to manage command mode and input mode
	- Command mode is default mode
	- To enter insert mode, click a, I, o or lns
	- To return to command mode, use esc
	- Use :wq! 


Using vim
	- Esc: get back to command mode
	- I, a: I is for insert and a is for append
	- o: opens or adds a new line for you
	- :wq: write-quit
	- q!: quit
	- When you type in "vim", try to follow it with the file you're working on
	- !: tells vim to not ask any followup questions
	- dd: deletes a line
	- yy: copies current line selected
	- p: paste
	- v: visual mode
	- u: undo
	- ctrl r: redo
	- y: yank as in copy
	- gg: brings cursor to first line of document
	- G: brings cursor to end line of document
	- /text: search for text
	- ?text: search for text in opposite direction; down to up.
	- ^: brings cursor to beginning of current line
	- $: brings cursor to end of current line
	- :%s/old/new/g: calling the substitute globally (g), so %s/line/LINE/g means it 	will change "line" to "LINE" globally
	
  
Understanding Globbing and Wildcards
	- Globbing is a shell feature that helps match filenames
	- Not to be confused with regular expressions, which help find text patterns
	- For documentation: see man 7 glob
	- ls host*: shows all files that start with host
	- ls ?[insert word]*: example: ls ?ost
	- ls [hm]ost: this is all files that don't start with h or m
	- ls [!hm]ost
	- ls script[0-9][0-9]: shows all scripts followed by two-digit number
	- touch script{0..100}: example of creating 99 100 files at once

	
Using Cockpit
	- systemctl enable --now cockpit.socket: this enables cockpit
	- systemctl status --now cockpit.socket: this shows cockpit
	- Visit server GUI at localhost:9090
  

Lesson 3: Essential File Management Tools

Essential File Management Tasks
	- ls: lists files
	- mkdir: creates directory; use mkdir -p to create an entire path (e.g. mkdir -p 	new/scripts)
	- cp: copy files (cp /etc/hosts . -- that copies it to current directory; use -r 	for recursive to copy all contents within directory)
	- mv: move files (mv script* scripts/ -- this moves all files with script in it to scripts/)
	- rmdir - remove directory; limited use because you can only move empty directories
	- rm - remove command; rm -rf means recursive and f is force

Finding Files
	- "which" command looks for binaries in $PATH (current path)
	- locate uses a database but needs to be built and updated by updatedb command, which would require running a cron job at least once a day to update it
	- find command is most flexible tool: example find / -name "hosts" -- this looks for complete file names in root directory with the name "hosts"
	- Another example of find command is "find / -type" or "find / -user"; check out man page for this
	- Another example of find command is "find /etc -exec grep -l student {} \:; 2>/dev/null", which searches /etc directory and executes grep (filtering) and 	lists files that have the word student in them and redirects (2>) error messages. 	The semicolon before redirect ends the exec command, which is required
	- c is for bytes
	- find /etc -size for finding files based on size
	
Understanding Mounts
	- To access a device, it must be connected to a directory
	- This is known as mounting the device
	- The Linux filesystem typically uses multiple mounts
	- Different types of data are typically on different devices for multiple reasons such as security, manageability, specific mount options

Understanding Links
	- Links are pointers to files in a different location, which helps organize better
	- Similar to shortcuts on other operating systems
	- Links can be useful to make the same file available on multiple locations
	- Linux uses hard links and symbolic links
	- Create hard links with ln and symbolic links with ln -s
	- Symbolic links goes to a hard link whereas hard link has a direct relation to 	inode
	- Symbolic links can be created on directories and across devices, thus more flexible than hard links, but if something goes wrong with the hard link, it will fail the symbolic link too

Working with Links
	- ls -il: list files, I displays inode number, which is a unique number 
	- ln /etc/hosts /root/hardhosts: example of hard link created
	- ln -s: symbolic link command
	- Permissions are not handled at symbolic link but at target file
	- All binaries are in bin directory
	- All system binaries are in system bin directory
	- Symbolic links are more common
	- ln -s /[destination] . -- the period is the current directory

Working with tar
	- tar is the Tape Archiver
	- It doesn't compress data
	- Basic use is to compress, extract or list
		- tar -cvf my_archive.tar /home /etc: c is create, v is verbose, f is file, and that means it will create a tar file with the contents of the home and etc directories 
		- tar -tvf: shows contents of an archive
		- tar -xvf my_archive: extracts to the current directory
		- use -C to switch the output path: example tar xvf homes.tar -C /tmp
	- To add compression, use -z, -j or -J
	- All files within tar are relative filenames
	- mv command can also be used to rename
	- file command allows you to see what type of file your file is


Working with Compressed Files
	- gzip is most common compression utility
	- bzip2 is an alternative
	- zip is also available and has Windows-compatible syntax
	- x2 (xz command) is showing up more often as well because it is quicker and compresses to smaller sizes
	- gunzip will unzip the gzip file
	- gzip -k is to keep the original file in addition to the compressed file 
  
  
Miscellaneous
	- ["command] --help" is a good command to learn more like man but less
	- "ls -d *[0-9]*" is a way to see all files with numbers in their names
	- To copy a files with specific character range, use cp /etc/[a-c]* /tmp/files.	The dash is range
	- mv [ab]* photos/: moves files beginning with a or b to /photos
	- mv c* videos/: moves files beginning with c to /photos


Lesson 4: Working with Text Files

Using Common Set Tools
	- more command was the original file pager; helps read contents of a text file; example: more /etc/passwd
	- less command provides shorter bits of files; example: less /etc/passwd, which doesn't allow you to move up/back on page
	- Use head to show the first 10 first lines of a text file; example: head -n 5 /etc/passwd -- first 5 lines shown
	- Use tail to show the 10 last lines
	- Use -n nn to specific to another number of lines
	- You can pipe both head and tails
	- Tail -f /var/log/messages will give you real-time view of logs as processes are documented to them
	- Example: head -n 6 /etc/passwd | tail -n 1 -- this shows last line of first six
	 - cat dumps text file contents on screen
		- -A shows all non-printable characters
		- -b numbers lines
		- -s suppresses repeated empty lines
	- tac is doing the same but in reverse order
	- cut: filter output; example cut -f 3 [field number three] -d : /etc/passwd
	- sort: sort output (chronologically or alphabetically); example sort -n (numeric)
	- tr: translates; example tr [a-z] [A-Z] -- that changes lowercase to uppercase
	

Using grep
	- grep is an excellent utility to find text files
	- ps aux | grep ssh; filters out lines containing ssh
	- grep linda *; looks in * to find occurrence of text "Linda"
	- grep -i linda *; the -i makes it not case sensitive 
	- grep -A linda /etc/passwd; -A or -B prints lines before and after
	- grep -Rl root /etc; recursive list grep
	- generic regular expression parser: grep


Understanding Regular Expressions
	- Regular Expressions are text patterns that are used by tools like grep
	- Don't confuse regular expressions with globbing. To avoid this, put your regular expression entirely in single quotes. Example: grep 'a*' vs a*, which will return words beginning with the letter a.
	- Regular expressions are only for: grep, vim, awk, sed and other ones
	- Extended regular expressions enhance basic regex features
	- See man 7 regex for details
	- Regular Expressions are built around atoms, which specifies what text is to be matched
	- Atoms can be single characters, a range of characters or a dot
	- Atoms can also be a class, such as [[:alpha:]], [[:upper:]], [[:digit:]] or [[:alnum:]]
	- Second is the repetition operator, specifying how often a character occurs or recognizes if a character occurs multiple times: example: grep 'bo*t' regtext returns 'boot' but not 'boat'
	- The third element is indicating where to find the next character
	- Example: cat regtext
	- Example: grep 'b.t' regtext -- this looks within regtext file whether it has words that begin with a b, have any character (.) after it and then the third letter is T
	- Question marks are a part of extended regular expressions, which requires egrep instead of grep

Common Regular Expressions: 
	- ^ beginning of line; example: grep '^...' *
	- $ end of line; example: grep '...$' *
	- \< beginning of word; example: grep '\<root' 
	- \> end of word; example: grep 'root\>'
	- * zero or more times
	- + one or more times
	- ? zero or one time
	- {n} exactly n times
	

Using awk
	- awk is a powerful text utility that is specialized in data extraction and reporting
	- It can perform actions based on selectors
	- Example: awk -F : '/linda/ { print $4 }' /etc/passwd
	- Example: awk -F : '{ print $NF }' /etc/passwd -- -F is a field separator, NF is number of fields
	- Example: ls -l /etc | awk '/pass/ { print }' | less
	

Using sed
	- sed = Stream editor, used to search and transform text
	- Example: sed -n 4p sedfile -- this prints the fourth line of the sedfile file 
	- Example: sed -i s/four/FOUR/g sedfile -- the -i allows sed to write directly to file
	- Example: sed -i -e '2d' sedfile -- -e is edit command and 2d means it will delete line 2
	
	
Lesson 5: Connecting to a Server

Understanding the Root User
	- Root user is a kernel space level user with direct access to system resources
	

Logging in to GUI
	- Only ordinary users visible; click "Not listed" for others
	- GNOME
	
Logging in to the Console
	- 95% of all Linux systems don't have GUI
	- Type in username and then password
	
Understanding Virtual Terminals
	- TTY: another word for Terminal (/dev/tty)
	- Virtual Terminal: ctrl alt fn key sequence to address 6 virtual terminals (tty2-tty6); tty1 is default terminal
	
Switching Between Virtual Terminals
	- Use chvt to switch between virtual terminals: example chvt 5
	- Or use ctrl alt fn
	- Need to be root in order to change virtual terminals
	- w command shows terminals and users active
	

Using su to Work as Another User
	- su command is used to open a shell as another user
		- useful to open a root shell
		- For root, useful to test functionality as user
	- The password of the target user is required
	- Use su - to open a login shell
		- This will give complete access to the environment of the target user
		- su - will prompt you for default root password
		- Once you are in as root, enter target user and no password prompted
			- Example: su - and then su - linda

Using sudo to Perform Administrator Tasks
	- sudo is used to run tasks as another user
	- sudo prompts for the password of the current user
	- Users must be authorized to use sudo
	- Authorization through /etc/sudoers and /etc/sudoers.d/*
		- Do not edit directly but use visudo
	- Users that are member of the group wheel can use sudo to run administration tasks
	- In order to create a sudo configuration, use visudo in a root shell.
	- id command shows groups user is a part of. Example: id student
	- usermod command adds user (student) to different group (wheel). Example: user mod -aG wheel student
	- Group membership of users is read when users logged in only, so to see changes reflected you need to sign out and in again
	- tail -n 1 /etc/passwd will show recently created user

Using ssh to Log In Remotely
	- SSH is secure shell, and used to establish a secure remote connection, meaning it's encrypted
	- Identity of targeted server is verified though host keys.
		- After initial connection, host key is stored in ~/.ssh/known_hosts
	- Sensitive data will be sent through an encrypted connection
	- Use ssh -X or ssh -Y to display graphical screens from targeted server locally if it is installed; -Y is more secure and allows you to forward graphical screens securely
	- Use ssh [user]@[host] to log in as user
	- Use exit to terminate ssh session
	

Lesson 6: Managing Users and Groups

Understanding the Need for User Accounts
	- A user is a security principle, users accounts are used to provide people or processes access to system resources
	- Processes are using system accounts
	- System accounts have a lower user ID
	- People are using regular user accounts with higher user ID
	

Understanding User Properties
	- /etc/passwd -- where users and properties are defined.
		- Example: student:x:1000:1000:student:/home/student:/bin/bash
			- "student": name of the account
			- "x": password placeholder
			- "1000": UID - unique identifier for users
			- "1000": GID - primary group ID
			- "student": GECOS - additional non-mandatory info about user
			-  "/home/student": environment where users create personal files
			- "/bin/bash": shell
			- Default shell on RHEL is /bin/bash
			- On RHEL 8, default group is the user name when user is created
			

Creating and Managing Users
	- useradd: create user accounts. Example: "useradd -c bill bill"
		- -c is for comment on GECOS field
		- -p is to set an encrypted password on new user
		- -s is to set a shell different from /bin/bash, such as /bin/false to create a user who is never supposed to log in
	- usermod: modify user accounts. Example: "usermod -aG wheel bill"
		- -a is to append user to supplemental group, such as wheel
		- -G is to create a new list of supplemental groups for users, removing all currently assigned ones. Use both, "-aG," to keep current list and add to it
	- id: use this command with username to see current groups: Example: "id bill"
	- userdel: delete user accounts. Example: "userdel -f bill"
		- -f forces deletion of user
		- -r removes user home directory and spool, where user email is stored
	- passwd: set passwords. Example: "password -l linda"
		- -u is set to unlock paassword
		- -e is to set expiration
		- -l is to lock a user account
		- -x is to set maximum password lifetime (root only)
		- -s reports password status


Managing Default User Settings
	- Use "useradd -D" to specify default settings. 
	- Settings specified using above command are written to /etc/default/useradd apply to useradd only
	- You can ignore "GROUP=100," which is an old setting and is no longer used because it is overwritten elsewhere
	- /etc/skel is where contents that'll be copied to home directory of new users
		- if you add any files to this, such as a text file from vim, they will be applied to new users directories
	*- Alternatively write default settings to /etc/login.defs
		- open in vim to make changes and note that it doesn't affect current users but only new ones
	- Hidden files shape the user environment
	

Understanding /etc/passwd and /etc/shadow
	- /etc/passwd is used to store user properties
		- root user has UID of 0
		- /sbin/nologin means bin system accounts don't log in to system
		- sync system account is an example of an account that runs one task only; same with halt
		- nobody user with no permissions at all; just a user entity
	- password properties are stored in /etc/shadow
		- passwords are stored separately
		- you'll see the username, the hashed password and then a five digit number that calculates all Linux time since January 1970
		- after the five digit number, you'll see 0 for minimum days the password must be used and then 99999 for maximum days the password must be used
		- 7 is the number of days warning before expiration
		- If you see !! it means password is disabled
	- NEVER use an editor to edit /etc/shadow
	- /etc/group is used for group properties
	- To remove a password, use passwd -l to lock the user

Understanding Group Membership
	- Each user must be a member of at least one group, which is auto taken care of if using proper utilities
	- Primary Group Membership is managed through /etc/passwd
	- The user primary group becomes group-owner if user creates a file
	- Additional secondary groups can be defined as well
	- Secondary Group Membership is managed through /etc/groups
	- Use id command to see which groups a user is a member of
	- GID is primary group of user
	- use grep to obtain group info. Example: grep linda /etc/group
	

Creating and Managing Groups
	- Use groupadd to add groups. Example: groupadd sales
	- groupdel and groupmod to delete and modify groups. Example: groupdel sales
	- Use lid -g [groupname] to list all users that are a member of a specific group. Example: lid -g wheel


Managing Password Properties
	- Basic password requirements are set in /etc/login.defs
		- The only thing you can set is how long a passwd can be; by default it's 5
	- For advanced password properties, Pluggable Authentication Modules (PAM) can be used
		- Look for the pam_tally2 module
	- To change password settings for current users, use chage or passwd as root. Example: chage Linda
	- All changes are written to /etc/shadow file so you can use grep linda /etc/shadow to see info
	

Lesson 7: Managing Permissions

Understanding Ownership
	- To determine which permissions a user has, Linux uses ownership
	- Every file has a user-owner, a group-owner and others entity that is also granted permissions (ugo)
	- Linux permissions are not additive. If you are the owner, permissions are applied and that's all
	- If you are neither group owner nor user owner, you are others
	- Use ls -l command/option to display ownership and permissions
		- drwx------. 1 root root 0: d is for directory filetype; r is read; w is write; x is execute; the first three dashes are group permissions; the last three are others; the first root is owner user; the second root is group;
	

Changing File Ownership
	- Use chown user [:group] file to set user-ownership. Example: chown anna newfile or chown anna:profs newfile, which sets user and group owners on file
	- Use chgrp group file to set group-ownership. Example: chgrp students newfile


Understanding Basic Permissions
	- Read (4) allows read-only files and list directory permission 
	- Write (2) allows modify files and delete/create directories
	- Execute (1) allows run files and cd directories
	- Execute is always paired with read and vice versa, and are minimal permissions for a directory
	- chmod is used to modify permissions


Managing Basic Permissions
	- chmod is used to manage permissions
	- It can be used in absolute or relative mode
		- Absolute mode example: chmod 750 myfile -- 7 is rwx for user, 5 is rx for group, 0 is others. 
		- Relative mode example: chmod +x myscript -- adds execute permission to file. 


Understanding umask
	- The umask is a shell setting that subtracts the umask from the default permissions
	- Default permissions for a file are 666
	- Default permissions for a directory are 777
	- If you have a umask setting of 022, the result is all new files will have a permission for 644 and directories are 755
		- Example: umask command alone returns the setting 0022 (ignore first zero); to change it, type "umask [new setting that'll subtract from defaults]"
	- umask comes from a shell config file in /etc/profile
	- Search vim files with a forward slash, so /umask to find it on page
	- To change it, it's best to do it in user's home directory and in the .bash_profile file using vim, where it can be added under the comment, "# User specific environment and startup programs"
	

Understanding Special Permissions
	- SUID (4) is set user ID and allows you to run files as owner and no meaning on directory
	- SGIP (2) is set group ID and allows you to run files as group owner and directories will inherit the directory group owner
	- Sticky bit (1) has no meaning on files but allows directories to be deleted if you are the owner of the file or the directory that contains the files


Managing Special Permissions
	- SUID: use chmod 4770 [file name] or chmod u+s [file name]
	- SUID should not be used unless there's a really specific case
	- SGID: use chmod 2770 [file name] or chmod g+s [file name]
	- Sticky bit: use chmod 1770 [file name] or chmod +t [file name]
		- Sticky bit is indicated in permissions with an uppercase T under others
	

Understanding ACLs
	- ACLs are used to grant permissions to additional users and groups
	- The normal ACL applies to existing files only, so it applies to existing files recursively in a directory but not on new ones
	-  Use a default ACL on a directory if you want it to apply to new files too
	- He suggests setting a default ACL in directories
	- getafcl shows current settings
	- setfacl -R -m g:somegroup:rx /data/groups; -m is for modify; g is for group; rx is read/write
	- setfacl -m d:g:somegroup:rx /data/groups - do this for new files to receive ACL in directory. The d sets it to default on directory
	

Managing ACLs
	- getafcl works even if you don't have current directory
	- Use setfacl on new directories to begin with
	- If there's a "+" on the ls -l permissions list, the default ACL is applied
	- The default masks sets itself up


Troubleshooting Permissions
	- To delete files, all you need is write permission
	- If you don't have write permission on a file but you open it in vim, vim will create a new file with the same name and overwrite the old file
	- chmod +t . applies sticky bits on current directory


*Lab Notes
	- Change umask in user home directory in .bash_profile file
		- Example: cd/home/linda and then vim .bash_profile and then set umask 007, which ensures user and group have full access
	- cd/data | mkdir profs students
	- 770 means full rw access to directories but others has zero permission; example: chmod 3770 students and chmod 3770 profs
	- 2770 is all files are writable for all members using SGID
	- 3770 is user can only delete files they created
	- Apply sticky bits for read access to everything in /data/students
	- Make Anna headmaster by chown Anna:students students and chown Anna:profs profs
	- setfacl -m d:g:profs:rx /data/students gives members have read access to everything in /data/students


Lesson 8: Configuring Networking

Understanding IPv4 Networking
	- In IPv4, each node needs its own IP address
	- Each IP address must be indicated with the subnet mask behind it ("/24" or "/32")
		- Example: 111.111.1.100/24 -- the first three are the network, making up 24 bits, and the last is the node
	- The default router or gateway specifies which server to forward packets to that have an external destination
	- The DNS nameserver is the IP address of a server that helps resolve names to IP addresses and the other way around
	- IPv4 is still most common, but IPv4 can be used as well
	- IPv6 addresses are written in hexadecimal notation (fd01::...).
	- IPv4 and IPv6 can co-exist on same network interface
	- RHEL 8 by default uses IPv6 protocol for services
	

Understanding NIC Naming
	- NIC = network interface card
	- IP address config needs to be connected to a specific network device
	- Use "ip link show" to see current devices, and "ip addr show" to check their config
	- Every system has an lo device (loopback), which is for internal networking
	- Apart from that you'll see the name of the real network device, which in RHEL 8 is presented as a BIOS name
	- Classical naming of devices is eth0, eth1 and so on
		- But these don't provide any info on physical device location
	- BIOS naming is based on hardware properties to give more specific info in the device name
		- Example: em[1-N] for embedded NICs; eno[nn] for embedded NICs; p<slot>p<port> for NICs on the PCI bus
	- If the driver doesn't reveal network device properties, classical naming is used


Managing Runtime Configuration with ip
	- The ip tool can be used to manage all aspects of IP networking
	- It replaces the legacy ifconfig tool; do not use ifconfig anymore
	- Use ip addr to manage address properties
	- Use ip link to show link properties
	- Use ip route to manage route properties
	- Use ip addr show to see current network config
	- inet6 is IPv6 address
		- Every NIC gets IPv6 address for internal use only and generally begins with "fe80"
	- scope global means it's a valid IP address worldwide
	- Use ip addr add dev [device name] [IP needing adding]
		- This is used for container hosts, cloud hosts or web servers
		- Addresses added this way are runtime, meaning if you reboot, the IP will be gone
	- Use ip route show to see current routing table
	- ip route del default via [ip] to delete default IP
	- ip route add default via [ip] to add default IP
	- cat /etc/resolv.conf to manage DNS


Understanding RHEL 8 Networking
	- /etc/sysconfig/network-scripts/ifcfg-[device name] is where configuration profile resides of network card
		- If the file is changed, it needs to be reloaded using command "nmcli con up" or restart NetworkManager
		- This creates a runtime config which can be managed with "ip" command 
	- NetworkManager is surface that works with configuration to apply to network card
	- nmcli - NetworkManager command line interface command used to talk to NetworkManager
	- nmtui - does similar to above but with GUI
	

Managing Persistent Networking with nmcli
	- An nmcli connection is a config that is added to a network device
	- Connections are stored in config files
	- The NetworkManager service must be running to manage these files
	- Ensure that the bash-completion RPM package is installed when working with nmcli
	- "systemctl status NetworkManager" command allows query of NetworkManager services
	- "rpm -qa | grep bash-completion" -- bash-completion allows easier composition of commands, especially longer ones
	- man nmcli -- example 9 is important here
	- A connection is just a configuration file
	- "nmcli" and then press tab twice to see all of the options and then build on it as seen below
		- nmcli connection -- this lists options with connections
		- nmcli connection add ifname
		- nmcli connection add ifname ens33 ipv4.
		- nmcli connection add ifname ens33 ipv4.addresses [ip/subnet] ipv4.gateway [ip] ipv4.dns 8.8.8.8 type ethernet
	- "nmcli connection show" command lists all connections
	- "nmcli connection up [name]" makes it active
	- "ip a" command lists IP addresses


Managing Persistent Networking with nmtui
	- nmtui is better utility to do things quickly and easily because it gives a GUI
	- Change ethernet ipv4 configuration to manual
	- Don't forget to add subnet mask on addresses
	- Sometimes after a network configuration it is not always set to auto connect, so make sure you check that
	- Select "Activate a connection" too to activate it
	- Rename server using nmtui by changing "Set system hostname," which'll show when you log out/in again
	

Verifying Network Configuration Files
	- cd /etc/sysconfig/network-scripts -- config file used for troubleshooting and reviewing
		- To reapply changes made, mcli connection up [connection name]
	- BOOTPROTO=none -- boot protocol can be set to DHCP if you want to obtain IP
	

Testing Network Connections
	- ping is used to test connectivity
		- ping -c 1 google.com for example pings only once the DNS
 	- ip addr show is current config
	- ip route show is current routing table
	- dig can test DNS nameserver working; example: dig google.com
	- If ping 8.8.8.8 is unreachable for example, either local IP or routing is wrong
	- ip route add default via [ip] 
