# These are my study notes for RHCSA exam, taken while watching courses and doing labs. 

Lesson 2: Using Essential Tools

CLI Commands
	- pwd: print working directory
	- whoami: current username
	- ls: current directory
	- ls -l: -l is the "option," which shows names of directories and their properties
	- ip addr show: current IP configuration
	- free: available memory
	- free -m: m option is for megabytes
	- df - disk free and storage devices
	- df -h: h option is for human-readable formats
	- cat: Shows contents of a configuration file
	- findmnt: shows mounted file systems on machine


Understanding the Shell

Bash is the default shell
	- Tab command completion (press tab twice to show list of available options)
	- "history" command - shows list of previous use of commands
	- Use "!11" will run command eleven in the list above again. You can also use ctrl R and type in the command you want to use. You can also use the up-arrow key. 
	- Piping or semicolon - string together inputs
	- "ps aux" - ps shows processes and aux shows all processes. More powerful with root user
	*- "less" doesn't show the entire list, so ps aux | less shows screen 1. Press space to show more.
	- "wc" is word count command
	- Redirection - use ">"
	- Append - use ">>"
	- Redirect error messages - "2>"; used for results that exist and don't exist in 	one command
	- "env" - environment variables
	- Aliases - command you have defined yourself or shortcut to another command; for example: h = history makes h short for historical list of commands
	- Scripts - command file with several lines of code that can be run as an independent command
	

Understanding I/O Redirection and Piping
	- Redirection uses STDIN (standard input), STDERR (standard error) and STDOUT (standard output)
	- ">" and ">>" are for output redirection, "2>" for standard error redirection and "<" for input direction
	- In Piping, the STDOUT of the first command is used as STDIN of the second command
	- "Grep": filtering utility for searching text
	- "-R": recursive, which means including subdirectories
	- Example of redirecting: "grep -R student /etc 2>/dev/null" which redirects errors to /dev/null, which will drop everything, and will show only the ones that are useful
	- Example of piping: "ls -l /etc | grep host" will pipe in grep, the filtering tool, and look for files/directories only with the name 'host' in them


Understanding the Linux File System
	- Known as "FHS"
	- Directory usage is standardized and maintained by Linux Foundation
	- The starting point is root directory
	- Different devices may be integrated in FHS by using mounts
	- Root directory is mounted on disk device on whatever the name of your disk device is
	- Boot directory is split off and on its own device
	- Home directory can be on a remote server; server:/home
	- cd .. : means bring up one level
	- cd /boot: This is everything that is needed to boot machine, including vmlinuz, which is the Linux kernel and allows you to interact with the hardware
	- cd /dev: This is for devices and allows you to talk to specific hardware devices. 
	- etc: directory for configuration files that are readable
	- cd /home: lists user home folders
	- useradd command: allows you to create a new user, such as "useradd test"
	- cd /usr: program files and binaries in bin (commands used by normal users) and sbin (system commands used by root)
	- cd /var: writes dynamic data, such as log files in /var/log
	- man hier: manual of hierarchy


Using man
	- Sections define command types in man
	- man man: man page of manual
		- Section 1: Executable programs or shell commands: ran by ordinary users
		- Section 5: File formats and conventions: ran for config files
		- Section 8: System administration commands: ran by sysadmins as root
	- Example: man lvcreate returns "LVCREATE(8)", the 8 meaning it's from sysadmin section 8.
	- Examples of commands used are usually at the bottom of man page, which you can get to by typing uppercase "G"
	- Search for text using /
	- On a man page, the synopsis shows what options are available to use with command. If there are brackets, such as "[OPTION]", then it is optional. The 		multiple dots means it can be used multiple times.  
	
  
Finding the Right Man Page
	- All man pages are indexed in the Mandy
	- Use man -k or apropos to search mandb based on keyword
	- A lot of results can show; use grep to filter the results
	- The mandate is built automatically through a cron scheduled task
	- Manually trigger a rebuild using mandb
	- regex: regular expression
	- Update mandb by typing in "su - mandb"
	- man -k user | grep [section]
	
  
Understanding vim
	- vim (or vi) is the default editor and is used as an embedded editor by many commands
	- vim is an enhanced version of vi
	- To work with vim, you need to manage command mode and input mode
	- Command mode is default mode
	- To enter insert mode, click a, I, o or lns
	- To return to command mode, use esc
	- Use :wq! 


Using vim
	- Esc: get back to command mode
	- I, a: I is for insert and a is for append
	- o: opens or adds a new line for you
	- :wq: write-quit
	- q!: quit
	- When you type in "vim", try to follow it with the file you're working on
	- !: tells vim to not ask any followup questions
	- dd: deletes a line
	- yy: copies current line selected
	- p: paste
	- v: visual mode
	- u: undo
	- ctrl r: redo
	- y: yank as in copy
	- gg: brings cursor to first line of document
	- G: brings cursor to end line of document
	- /text: search for text
	- ?text: search for text in opposite direction; down to up.
	- ^: brings cursor to beginning of current line
	- $: brings cursor to end of current line
	- :%s/old/new/g: calling the substitute globally (g), so %s/line/LINE/g means it 	will change "line" to "LINE" globally
	
  
Understanding Globbing and Wildcards
	- Globbing is a shell feature that helps match filenames
	- Not to be confused with regular expressions, which help find text patterns
	- For documentation: see man 7 glob
	- ls host*: shows all files that start with host
	- ls ?[insert word]*: example: ls ?ost
	- ls [hm]ost: this is all files that don't start with h or m
	- ls [!hm]ost
	- ls script[0-9][0-9]: shows all scripts followed by two-digit number
	- touch script{0..100}: example of creating 99 100 files at once

	
Using Cockpit
	- systemctl enable --now cockpit.socket: this enables cockpit
	- systemctl status --now cockpit.socket: this shows cockpit
	- Visit server GUI at localhost:9090
  

Lesson 3: Essential File Management Tools

Essential File Management Tasks
	- ls: lists files
	- mkdir: creates directory; use mkdir -p to create an entire path (e.g. mkdir -p 	new/scripts)
	- cp: copy files (cp /etc/hosts . -- that copies it to current directory; use -r 	for recursive to copy all contents within directory)
	- mv: move files (mv script* scripts/ -- this moves all files with script in it to scripts/)
	- rmdir - remove directory; limited use because you can only move empty directories
	- rm - remove command; rm -rf means recursive and f is force

Finding Files
	- "which" command looks for binaries in $PATH (current path)
	- locate uses a database but needs to be built and updated by updatedb command, which would require running a cron job at least once a day to update it
	- find command is most flexible tool: example find / -name "hosts" -- this looks for complete file names in root directory with the name "hosts"
	- Another example of find command is "find / -type" or "find / -user"; check out man page for this
	- Another example of find command is "find /etc -exec grep -l student {} \:; 2>/dev/null", which searches /etc directory and executes grep (filtering) and 	lists files that have the word student in them and redirects (2>) error messages. 	The semicolon before redirect ends the exec command, which is required
	- c is for bytes
	- find /etc -size for finding files based on size
	
Understanding Mounts
	- To access a device, it must be connected to a directory
	- This is known as mounting the device
	- The Linux filesystem typically uses multiple mounts
	- Different types of data are typically on different devices for multiple reasons such as security, manageability, specific mount options

Understanding Links
	- Links are pointers to files in a different location, which helps organize better
	- Similar to shortcuts on other operating systems
	- Links can be useful to make the same file available on multiple locations
	- Linux uses hard links and symbolic links
	- Create hard links with ln and symbolic links with ln -s
	- Symbolic links goes to a hard link whereas hard link has a direct relation to 	inode
	- Symbolic links can be created on directories and across devices, thus more flexible than hard links, but if something goes wrong with the hard link, it will fail the symbolic link too

Working with Links
	- ls -il: list files, I displays inode number, which is a unique number 
	- ln /etc/hosts /root/hardhosts: example of hard link created
	- ln -s: symbolic link command
	- Permissions are not handled at symbolic link but at target file
	- All binaries are in bin directory
	- All system binaries are in system bin directory
	- Symbolic links are more common
	- ln -s /[destination] . -- the period is the current directory

Working with tar
	- tar is the Tape Archiver
	- It doesn't compress data
	- Basic use is to compress, extract or list
		- tar -cvf my_archive.tar /home /etc: c is create, v is verbose, f is file, and that means it will create a tar file with the contents of the home and etc directories 
		- tar -tvf: shows contents of an archive
		- tar -xvf my_archive: extracts to the current directory
		- use -C to switch the output path: example tar xvf homes.tar -C /tmp
	- To add compression, use -z, -j or -J
	- All files within tar are relative filenames
	- mv command can also be used to rename
	- file command allows you to see what type of file your file is


Working with Compressed Files
	- gzip is most common compression utility
	- bzip2 is an alternative
	- zip is also available and has Windows-compatible syntax
	- x2 (xz command) is showing up more often as well because it is quicker and compresses to smaller sizes
	- gunzip will unzip the gzip file
	- gzip -k is to keep the original file in addition to the compressed file 
  
  
Miscellaneous
	- ["command] --help" is a good command to learn more like man but less
	- "ls -d *[0-9]*" is a way to see all files with numbers in their names
	- To copy a files with specific character range, use cp /etc/[a-c]* /tmp/files.	The dash is range
	- mv [ab]* photos/: moves files beginning with a or b to /photos
	- mv c* videos/: moves files beginning with c to /photos


Lesson 4: Working with Text Files

Using Common Set Tools
	- more command was the original file pager; helps read contents of a text file; example: more /etc/passwd
	- less command provides shorter bits of files; example: less /etc/passwd, which doesn't allow you to move up/back on page
	- Use head to show the first 10 first lines of a text file; example: head -n 5 /etc/passwd -- first 5 lines shown
	- Use tail to show the 10 last lines
	- Use -n nn to specific to another number of lines
	- You can pipe both head and tails
	- Tail -f /var/log/messages will give you real-time view of logs as processes are documented to them
	- Example: head -n 6 /etc/passwd | tail -n 1 -- this shows last line of first six
	 - cat dumps text file contents on screen
		- -A shows all non-printable characters
		- -b numbers lines
		- -s suppresses repeated empty lines
	- tac is doing the same but in reverse order
	- cut: filter output; example cut -f 3 [field number three] -d : /etc/passwd
	- sort: sort output (chronologically or alphabetically); example sort -n (numeric)
	- tr: translates; example tr [a-z] [A-Z] -- that changes lowercase to uppercase
	

Using grep
	- grep is an excellent utility to find text files
	- ps aux | grep ssh; filters out lines containing ssh
	- grep linda *; looks in * to find occurrence of text "Linda"
	- grep -i linda *; the -i makes it not case sensitive 
	- grep -A linda /etc/passwd; -A or -B prints lines before and after
	- grep -Rl root /etc; recursive list grep
	- generic regular expression parser: grep


Understanding Regular Expressions
	- Regular Expressions are text patterns that are used by tools like grep
	- Don't confuse regular expressions with globbing. To avoid this, put your regular expression entirely in single quotes. Example: grep 'a*' vs a*, which will return words beginning with the letter a.
	- Regular expressions are only for: grep, vim, awk, sed and other ones
	- Extended regular expressions enhance basic regex features
	- See man 7 regex for details
	- Regular Expressions are built around atoms, which specifies what text is to be matched
	- Atoms can be single characters, a range of characters or a dot
	- Atoms can also be a class, such as [[:alpha:]], [[:upper:]], [[:digit:]] or [[:alnum:]]
	- Second is the repetition operator, specifying how often a character occurs or recognizes if a character occurs multiple times: example: grep 'bo*t' regtext returns 'boot' but not 'boat'
	- The third element is indicating where to find the next character
	- Example: cat regtext
	- Example: grep 'b.t' regtext -- this looks within regtext file whether it has words that begin with a b, have any character (.) after it and then the third letter is T
	- Question marks are a part of extended regular expressions, which requires egrep instead of grep

Common Regular Expressions: 
	- ^ beginning of line; example: grep '^...' *
	- $ end of line; example: grep '...$' *
	- \< beginning of word; example: grep '\<root' 
	- \> end of word; example: grep 'root\>'
	- * zero or more times
	- + one or more times
	- ? zero or one time
	- {n} exactly n times
	

Using awk
	- awk is a powerful text utility that is specialized in data extraction and reporting
	- It can perform actions based on selectors
	- Example: awk -F : '/linda/ { print $4 }' /etc/passwd
	- Example: awk -F : '{ print $NF }' /etc/passwd -- -F is a field separator, NF is number of fields
	- Example: ls -l /etc | awk '/pass/ { print }' | less
	

Using sed
	- sed = Stream editor, used to search and transform text
	- Example: sed -n 4p sedfile -- this prints the fourth line of the sedfile file 
	- Example: sed -i s/four/FOUR/g sedfile -- the -i allows sed to write directly to file
	- Example: sed -i -e '2d' sedfile -- -e is edit command and 2d means it will delete line 2
	
	
Lesson 5: Connecting to a Server

Understanding the Root User
	- Root user is a kernel space level user with direct access to system resources
	

Logging in to GUI
	- Only ordinary users visible; click "Not listed" for others
	- GNOME
	
Logging in to the Console
	- 95% of all Linux systems don't have GUI
	- Type in username and then password
	
Understanding Virtual Terminals
	- TTY: another word for Terminal (/dev/tty)
	- Virtual Terminal: ctrl alt fn key sequence to address 6 virtual terminals (tty2-tty6); tty1 is default terminal
	
Switching Between Virtual Terminals
	- Use chvt to switch between virtual terminals: example chvt 5
	- Or use ctrl alt fn
	- Need to be root in order to change virtual terminals
	- w command shows terminals and users active
	

Using su to Work as Another User
	- su command is used to open a shell as another user
		- useful to open a root shell
		- For root, useful to test functionality as user
	- The password of the target user is required
	- Use su - to open a login shell
		- This will give complete access to the environment of the target user
		- su - will prompt you for default root password
		- Once you are in as root, enter target user and no password prompted
			- Example: su - and then su - linda

Using sudo to Perform Administrator Tasks
	- sudo is used to run tasks as another user
	- sudo prompts for the password of the current user
	- Users must be authorized to use sudo
	- Authorization through /etc/sudoers and /etc/sudoers.d/*
		- Do not edit directly but use visudo
	- Users that are member of the group wheel can use sudo to run administration tasks
	- In order to create a sudo configuration, use visudo in a root shell.
	- id command shows groups user is a part of. Example: id student
	- usermod command adds user (student) to different group (wheel). Example: user mod -aG wheel student
	- Group membership of users is read when users logged in only, so to see changes reflected you need to sign out and in again
	- tail -n 1 /etc/passwd will show recently created user

Using ssh to Log In Remotely
	- SSH is secure shell, and used to establish a secure remote connection, meaning it's encrypted
	- Identity of targeted server is verified though host keys.
		- After initial connection, host key is stored in ~/.ssh/known_hosts
	- Sensitive data will be sent through an encrypted connection
	- Use ssh -X or ssh -Y to display graphical screens from targeted server locally if it is installed; -Y is more secure and allows you to forward graphical screens securely
	- Use ssh [user]@[host] to log in as user
	- Use exit to terminate ssh session
	

Lesson 6: Managing Users and Groups

Understanding the Need for User Accounts
	- A user is a security principle, users accounts are used to provide people or processes access to system resources
	- Processes are using system accounts
	- System accounts have a lower user ID
	- People are using regular user accounts with higher user ID
	

Understanding User Properties
	- /etc/passwd -- where users and properties are defined.
		- Example: student:x:1000:1000:student:/home/student:/bin/bash
			- "student": name of the account
			- "x": password placeholder
			- "1000": UID - unique identifier for users
			- "1000": GID - primary group ID
			- "student": GECOS - additional non-mandatory info about user
			-  "/home/student": environment where users create personal files
			- "/bin/bash": shell
			- Default shell on RHEL is /bin/bash
			- On RHEL 8, default group is the user name when user is created
			

Creating and Managing Users
	- useradd: create user accounts. Example: "useradd -c bill bill"
		- -c is for comment on GECOS field
		- -p is to set an encrypted password on new user
		- -s is to set a shell different from /bin/bash, such as /bin/false to create a user who is never supposed to log in
	- usermod: modify user accounts. Example: "usermod -aG wheel bill"
		- -a is to append user to supplemental group, such as wheel
		- -G is to create a new list of supplemental groups for users, removing all currently assigned ones. Use both, "-aG," to keep current list and add to it
	- id: use this command with username to see current groups: Example: "id bill"
	- userdel: delete user accounts. Example: "userdel -f bill"
		- -f forces deletion of user
		- -r removes user home directory and spool, where user email is stored
	- passwd: set passwords. Example: "password -l linda"
		- -u is set to unlock paassword
		- -e is to set expiration
		- -l is to lock a user account
		- -x is to set maximum password lifetime (root only)
		- -s reports password status


Managing Default User Settings
	- Use "useradd -D" to specify default settings. 
	- Settings specified using above command are written to /etc/default/useradd apply to useradd only
	- You can ignore "GROUP=100," which is an old setting and is no longer used because it is overwritten elsewhere
	- /etc/skel is where contents that'll be copied to home directory of new users
		- if you add any files to this, such as a text file from vim, they will be applied to new users directories
	*- Alternatively write default settings to /etc/login.defs
		- open in vim to make changes and note that it doesn't affect current users but only new ones
	- Hidden files shape the user environment
	

Understanding /etc/passwd and /etc/shadow
	- /etc/passwd is used to store user properties
		- root user has UID of 0
		- /sbin/nologin means bin system accounts don't log in to system
		- sync system account is an example of an account that runs one task only; same with halt
		- nobody user with no permissions at all; just a user entity
	- password properties are stored in /etc/shadow
		- passwords are stored separately
		- you'll see the username, the hashed password and then a five digit number that calculates all Linux time since January 1970
		- after the five digit number, you'll see 0 for minimum days the password must be used and then 99999 for maximum days the password must be used
		- 7 is the number of days warning before expiration
		- If you see !! it means password is disabled
	- NEVER use an editor to edit /etc/shadow
	- /etc/group is used for group properties
	- To remove a password, use passwd -l to lock the user

Understanding Group Membership
	- Each user must be a member of at least one group, which is auto taken care of if using proper utilities
	- Primary Group Membership is managed through /etc/passwd
	- The user primary group becomes group-owner if user creates a file
	- Additional secondary groups can be defined as well
	- Secondary Group Membership is managed through /etc/groups
	- Use id command to see which groups a user is a member of
	- GID is primary group of user
	- use grep to obtain group info. Example: grep linda /etc/group
	

Creating and Managing Groups
	- Use groupadd to add groups. Example: groupadd sales
	- groupdel and groupmod to delete and modify groups. Example: groupdel sales
	- Use lid -g [groupname] to list all users that are a member of a specific group. Example: lid -g wheel


Managing Password Properties
	- Basic password requirements are set in /etc/login.defs
		- The only thing you can set is how long a passwd can be; by default it's 5
	- For advanced password properties, Pluggable Authentication Modules (PAM) can be used
		- Look for the pam_tally2 module
	- To change password settings for current users, use chage or passwd as root. Example: chage Linda
	- All changes are written to /etc/shadow file so you can use grep linda /etc/shadow to see info
